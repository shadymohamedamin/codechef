#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<numeric>
#include<utility>
#include<functional>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>
using namespace std;

#define all(v)				((v).begin()), ((v).end())
#define sz(v)				((int)((v).size()))
#define clr(v, d)			memset(v, d, sizeof(v))
#define rep(i, v)		for(int i=0;i<sz(v);++i)
#define lp(i, n)		for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)	for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)	for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
const int OO = (int)1e6;
const double EPS = (1e-7);
const ll mod=(ll)1e9+7;
int dcmp(double x, double y) {	return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1;	}

#define pb					push_back
#define MP					make_pair
#define P(x)				cout<<#x<<" = { "<<x<<" }\n"
typedef long double   	  ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;


typedef long long int ll;
/*ll calculatePower(ll base, ll powerRaised)
{
    if (powerRaised != 0)
        return (base*calculatePower(base, powerRaised-1));
    else
        return 1;
}*/
inline ll exp(ll b, ll p, ll m) {
	ll r=1;
	while(p) {
		if(p&1)
			r=(__int128)r*b%m;
		b=(__int128)b*b%m;
		p/=2;
	}
	return r;
}
/*ll power(__int128 a,__int128 b,ll m){
    __int128 result = 1;
    while(b>0){
        if(b%2==1){
            result = (result*a)%m;b--;
        }
        a = (a*a)%m;b/=2;
    }
    return result;
}*/
long long gcd(long long int a, long long int b)
{
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

int main()
{
    ios_base::sync_with_stdio(0);
	cin.tie(0);
ll t;
cin>>t;
while(t--)
{
   ll a,b,n;
   cin>>a>>b>>n;
   ll m=a==b?mod:a-b;
   ll temp=(exp(a,n,m)+exp(b,n,m))%m;
   cout<<gcd(temp,(a-b))%m<<endl;
}


	return 0;
}
